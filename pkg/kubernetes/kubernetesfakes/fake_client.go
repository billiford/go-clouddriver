// Code generated by counterfeiter. DO NOT EDIT.
package kubernetesfakes

import (
	"sync"

	"github.com/billiford/go-clouddriver/pkg/kubernetes"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/rest"
)

type FakeClient struct {
	WithConfigStub        func(*rest.Config) error
	withConfigMutex       sync.RWMutex
	withConfigArgsForCall []struct {
		arg1 *rest.Config
	}
	withConfigReturns struct {
		result1 error
	}
	withConfigReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyStub        func([]byte, string) (*unstructured.Unstructured, kubernetes.Metadata, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	applyReturns struct {
		result1 *unstructured.Unstructured
		result2 kubernetes.Metadata
		result3 error
	}
	applyReturnsOnCall map[int]struct {
		result1 *unstructured.Unstructured
		result2 kubernetes.Metadata
		result3 error
	}
	GetStub        func(string, string, string) (*unstructured.Unstructured, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getReturns struct {
		result1 *unstructured.Unstructured
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *unstructured.Unstructured
		result2 error
	}
	ListStub        func(schema.GroupVersionResource, metav1.ListOptions) (*unstructured.UnstructuredList, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 schema.GroupVersionResource
		arg2 metav1.ListOptions
	}
	listReturns struct {
		result1 *unstructured.UnstructuredList
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *unstructured.UnstructuredList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) WithConfig(arg1 *rest.Config) error {
	fake.withConfigMutex.Lock()
	ret, specificReturn := fake.withConfigReturnsOnCall[len(fake.withConfigArgsForCall)]
	fake.withConfigArgsForCall = append(fake.withConfigArgsForCall, struct {
		arg1 *rest.Config
	}{arg1})
	fake.recordInvocation("WithConfig", []interface{}{arg1})
	fake.withConfigMutex.Unlock()
	if fake.WithConfigStub != nil {
		return fake.WithConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.withConfigReturns.result1
}

func (fake *FakeClient) WithConfigCallCount() int {
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	return len(fake.withConfigArgsForCall)
}

func (fake *FakeClient) WithConfigArgsForCall(i int) *rest.Config {
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	return fake.withConfigArgsForCall[i].arg1
}

func (fake *FakeClient) WithConfigReturns(result1 error) {
	fake.WithConfigStub = nil
	fake.withConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) WithConfigReturnsOnCall(i int, result1 error) {
	fake.WithConfigStub = nil
	if fake.withConfigReturnsOnCall == nil {
		fake.withConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.withConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Apply(arg1 []byte, arg2 string) (*unstructured.Unstructured, kubernetes.Metadata, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("Apply", []interface{}{arg1Copy, arg2})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.applyReturns.result1, fake.applyReturns.result2, fake.applyReturns.result3
}

func (fake *FakeClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeClient) ApplyArgsForCall(i int) ([]byte, string) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].arg1, fake.applyArgsForCall[i].arg2
}

func (fake *FakeClient) ApplyReturns(result1 *unstructured.Unstructured, result2 kubernetes.Metadata, result3 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 *unstructured.Unstructured
		result2 kubernetes.Metadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) ApplyReturnsOnCall(i int, result1 *unstructured.Unstructured, result2 kubernetes.Metadata, result3 error) {
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 *unstructured.Unstructured
			result2 kubernetes.Metadata
			result3 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 *unstructured.Unstructured
		result2 kubernetes.Metadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) Get(arg1 string, arg2 string, arg3 string) (*unstructured.Unstructured, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeClient) GetArgsForCall(i int) (string, string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].arg1, fake.getArgsForCall[i].arg2, fake.getArgsForCall[i].arg3
}

func (fake *FakeClient) GetReturns(result1 *unstructured.Unstructured, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *unstructured.Unstructured
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetReturnsOnCall(i int, result1 *unstructured.Unstructured, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *unstructured.Unstructured
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *unstructured.Unstructured
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) List(arg1 schema.GroupVersionResource, arg2 metav1.ListOptions) (*unstructured.UnstructuredList, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 schema.GroupVersionResource
		arg2 metav1.ListOptions
	}{arg1, arg2})
	fake.recordInvocation("List", []interface{}{arg1, arg2})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *FakeClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeClient) ListArgsForCall(i int) (schema.GroupVersionResource, metav1.ListOptions) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].arg1, fake.listArgsForCall[i].arg2
}

func (fake *FakeClient) ListReturns(result1 *unstructured.UnstructuredList, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *unstructured.UnstructuredList
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListReturnsOnCall(i int, result1 *unstructured.UnstructuredList, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *unstructured.UnstructuredList
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *unstructured.UnstructuredList
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kubernetes.Client = new(FakeClient)
