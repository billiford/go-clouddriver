// Code generated by counterfeiter. DO NOT EDIT.
package sqlfakes

import (
	"sync"

	"github.com/billiford/go-clouddriver/pkg/kubernetes"
	"github.com/billiford/go-clouddriver/pkg/sql"
	_ "github.com/mattn/go-sqlite3"
)

type FakeClient struct {
	CreateKubernetesProviderStub        func(kubernetes.Provider) error
	createKubernetesProviderMutex       sync.RWMutex
	createKubernetesProviderArgsForCall []struct {
		arg1 kubernetes.Provider
	}
	createKubernetesProviderReturns struct {
		result1 error
	}
	createKubernetesProviderReturnsOnCall map[int]struct {
		result1 error
	}
	GetKubernetesProviderStub        func(string) (kubernetes.Provider, error)
	getKubernetesProviderMutex       sync.RWMutex
	getKubernetesProviderArgsForCall []struct {
		arg1 string
	}
	getKubernetesProviderReturns struct {
		result1 kubernetes.Provider
		result2 error
	}
	getKubernetesProviderReturnsOnCall map[int]struct {
		result1 kubernetes.Provider
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateKubernetesProvider(arg1 kubernetes.Provider) error {
	fake.createKubernetesProviderMutex.Lock()
	ret, specificReturn := fake.createKubernetesProviderReturnsOnCall[len(fake.createKubernetesProviderArgsForCall)]
	fake.createKubernetesProviderArgsForCall = append(fake.createKubernetesProviderArgsForCall, struct {
		arg1 kubernetes.Provider
	}{arg1})
	fake.recordInvocation("CreateKubernetesProvider", []interface{}{arg1})
	fake.createKubernetesProviderMutex.Unlock()
	if fake.CreateKubernetesProviderStub != nil {
		return fake.CreateKubernetesProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createKubernetesProviderReturns.result1
}

func (fake *FakeClient) CreateKubernetesProviderCallCount() int {
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	return len(fake.createKubernetesProviderArgsForCall)
}

func (fake *FakeClient) CreateKubernetesProviderArgsForCall(i int) kubernetes.Provider {
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	return fake.createKubernetesProviderArgsForCall[i].arg1
}

func (fake *FakeClient) CreateKubernetesProviderReturns(result1 error) {
	fake.CreateKubernetesProviderStub = nil
	fake.createKubernetesProviderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateKubernetesProviderReturnsOnCall(i int, result1 error) {
	fake.CreateKubernetesProviderStub = nil
	if fake.createKubernetesProviderReturnsOnCall == nil {
		fake.createKubernetesProviderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createKubernetesProviderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetKubernetesProvider(arg1 string) (kubernetes.Provider, error) {
	fake.getKubernetesProviderMutex.Lock()
	ret, specificReturn := fake.getKubernetesProviderReturnsOnCall[len(fake.getKubernetesProviderArgsForCall)]
	fake.getKubernetesProviderArgsForCall = append(fake.getKubernetesProviderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetKubernetesProvider", []interface{}{arg1})
	fake.getKubernetesProviderMutex.Unlock()
	if fake.GetKubernetesProviderStub != nil {
		return fake.GetKubernetesProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getKubernetesProviderReturns.result1, fake.getKubernetesProviderReturns.result2
}

func (fake *FakeClient) GetKubernetesProviderCallCount() int {
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	return len(fake.getKubernetesProviderArgsForCall)
}

func (fake *FakeClient) GetKubernetesProviderArgsForCall(i int) string {
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	return fake.getKubernetesProviderArgsForCall[i].arg1
}

func (fake *FakeClient) GetKubernetesProviderReturns(result1 kubernetes.Provider, result2 error) {
	fake.GetKubernetesProviderStub = nil
	fake.getKubernetesProviderReturns = struct {
		result1 kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetKubernetesProviderReturnsOnCall(i int, result1 kubernetes.Provider, result2 error) {
	fake.GetKubernetesProviderStub = nil
	if fake.getKubernetesProviderReturnsOnCall == nil {
		fake.getKubernetesProviderReturnsOnCall = make(map[int]struct {
			result1 kubernetes.Provider
			result2 error
		})
	}
	fake.getKubernetesProviderReturnsOnCall[i] = struct {
		result1 kubernetes.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createKubernetesProviderMutex.RLock()
	defer fake.createKubernetesProviderMutex.RUnlock()
	fake.getKubernetesProviderMutex.RLock()
	defer fake.getKubernetesProviderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sql.Client = new(FakeClient)
